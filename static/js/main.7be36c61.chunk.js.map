{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","id","type","i","className","alt","src","CardList","map","user","key","types","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","children","App","this","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","results","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7be36c61.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_REBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_REBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_REBOTS_FAILED'","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n  }\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n      case CHANGE_SEARCH_FIELD:\n        return Object.assign({}, state, {searchField: action.payload})\n      default:\n        return state\n    }\n  }\n\n  const initialStateRobots = {\n      isPending: false,\n      robots: [],\n      error: ''\n  }\n\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default: \n            return state;\n    }\n}","import React from 'react';\n\nconst Card = ({name, id, i, type}) => {\n    return (\n        <div className=\"pokecards-outer\">\n            <div className=\"pokecards-inner\">\n                <div className='pokecards pokecards-front'>\n                    {/* <img className=\"photos\" alt={name} src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`} /> */}\n                    <img className=\"photos\" alt={name} src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} />\n                    <div>\n                        <h2>{name}</h2>\n                    </div>\n                </div>\n                <div className=\"pokecards pokecards-back\">\n                    <div>\n                        <h2>{name}</h2>\n                        <p>Pokedex #: {id}</p>\n                        <p>Type: {type}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card; ","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    \n    return(\n        <div className=\"cards-container\">\n            {\n            robots.map((user, i) => {\n                return <Card i= {i} key={robots[i].id} id={i+1} name={robots[i].name} type={robots[i].types}/>\n            })\n            }\n        </div>\n    );\n}\n \nexport default CardList; ","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n                className='search-box'\n                type='search' \n                placeholder='search Pokémon'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll; ","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport {setSearchField, requestRobots} from '../actions'\n\nconst mapStateToPros = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n} \n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots()\n    }\n\n\n    render(){\n        const { searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robots => {\n            return robots.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return(\n            <div className='tc'>\n                <h1>Pokédex</h1>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                { isPending ? <h1>Loading</h1> :\n                    <CardList robots={filteredRobots} />\n                }\n                </Scroll>\n            </div>   \n        )\n    }\n}\n\n\nexport default connect(mapStateToPros, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch( { type: REQUEST_ROBOTS_PENDING });\n    fetch('https://pokeapi.co/api/v2/pokemon/?offset=0&limit=100')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data.results}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\nimport App from './containers/App'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}